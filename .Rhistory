shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(glue)
library(scales)
library(DT)
library(plotly)
library(lubridate)
library(dplyr)
library(anytime)
library(RColorBrewer)
library(leaflet)
data <- read.csv("covid.csv")
data
covid <- data %>%
rename(Date = ï..Date) %>%
select(-c("Growth.Factor.of.New.Deaths","Growth.Factor.of.New.Cases","Total.Rural.Villages","Total.Urban.Villages",
"Total.Cities","City.or.Regency","Total.Cases","Total.Deaths","Total.Recovered","Total.Active.Cases")) %>%
mutate(Date = ymd(anytime::anydate(Date)),
Month = lubridate::month(Date),
Day = lubridate::day(Date)
)
covid
# colsums(is.na(covid))
# covid[covid$location=="indonesia"]
# dim(covid)
covid_daily <- covid %>%
group_by(Date) %>%
summarise(Total.Cases = sum(New.Cases),
Total.Death = sum(New.Deaths),
Total.Recover = sum(New.Recovered)) %>%
mutate(Cum.Cases = cumsum(Total.Cases),
Cum.Death = cumsum(Total.Death),
Cum.Recover = cumsum(Total.Recover))
covid_daily
covid.atDate <- covid %>%
filter(Date<="2020-03-10")
covid.atDate
unique(covid$Island)
covid.island <- covid %>%
filter(Island=="Jawa")
covid.island
sliderInput("timeSlider", "Select Date:",
min = min(covid_daily$Date),
max = max(covid_daily$Date),
value = max(covid_daily$Date),
# pre = "$", sep = ",",
width      = "100%",
timeFormat = "%Y.%m.%d",
animate = animationOptions(loop = TRUE))
fluidRow(valueBox(covid_daily$Cum.Cases[covid_daily$Date==covid_daily$Date[100]],
"Confirmed",
icon = icon("credit-card"),
color = "red"),
valueBox(covid_daily$Cum.Recover[covid_daily$Date==covid_daily$Date[100]],
"Recoveries",
icon = icon("address-card"),
color = "green"),
valueBox(round(covid_daily$Cum.Death[covid_daily$Date==covid_daily$Date[100]],
"Deceased",
icon = icon("adjust"),
color = "blue"))
unique(covid$Location)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
library(tidyverse) # untuk transformasi data
library(plotly) # untuk membuat plot menjadi interaktif
library(glue) # untuk custom informasi saat plot interaktif
library(scales) # untuk custom keterangan axis atau lainnya
library(ggpubr) # untuk export plot
workers <- read_csv("jobs_gender.csv")
str(workers)
glimpse(workers)
# base R
colSums(is.na(workers))
# dplyr
workers %>%
is.na() %>%
colSums()
# membuang baris yang mengandung NA pada kolom pilihan
workers %>%
drop_na(total_earnings_male, total_earnings_female)
workers %>%
drop_na(total_earnings_male, total_earnings_female) %>%
is.na() %>%
colSums()
workers %>%
mutate(total_earnings_male = replace_na(data = total_earnings_male,
replace = mean(total_earnings_male,
na.rm = T))) %>%
is.na() %>% # utk cek NA apakah masih ada
colSums()
coba <- c(1,2,3,NA)
mean(coba)
workers_clean <- workers %>%
drop_na(total_earnings_female, total_earnings_male) %>%
select(-wage_percent_of_male) # karena NA-nya banyak
data_agg1 <- workers_clean %>%
filter(year == 2016) %>%
mutate(gap_earnings = total_earnings_male-total_earnings_female) %>%
group_by(major_category) %>%
summarise(mean_gap = mean(gap_earnings))
data_agg1
theme_algoritma <- theme(legend.key = element_rect(fill="black"),
legend.background = element_rect(color="white", fill="#263238"),
plot.subtitle = element_text(size=6, color="white"),
panel.background = element_rect(fill="#dddddd"),
panel.border = element_rect(fill=NA),
panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(color="darkgrey", linetype=2),
panel.grid.minor.y = element_blank(),
plot.background = element_rect(fill="#263238"),
text = element_text(color="white"),
axis.text = element_text(color="white")
)
plot_ranking <- data_agg1 %>%
ggplot(aes(x = mean_gap,
y = reorder(major_category,mean_gap),
text = glue("{major_category}
Gap Earnings: {mean_gap}"))) +
geom_col(fill = "dodgerblue4") +
geom_col(data = data_agg1 %>%
filter(major_category == "Computer, Engineering, and Science"),
fill = "firebrick") +
labs( x = NULL,
y = NULL,
title = "Gap Earnings on Male and Female 2016") +
scale_y_discrete(labels = wrap_format(30)) + #title tdk terlalu panjang
# menambahkan dollar symbol
scale_x_continuous(labels = dollar_format(prefix = "$")) +
theme_algoritma
# custom tooltip
ggplotly(plot_ranking, tooltip = "text")
data_agg2 <- workers %>%
pivot_longer(cols = c(workers_male, workers_female),
names_to = "var",
values_to = "value") %>%
group_by(major_category, var) %>%
summarise(rerata_workers = mean(value)) %>%
mutate(gender = ifelse(var == "workers_female", "Female", "Male")) %>%
group_by(major_category) %>%
mutate(proportion = round(rerata_workers/sum(rerata_workers),2)*100)
plot_composition <- data_agg2 %>%
ggplot(aes(x = rerata_workers,
y = major_category,
text = glue("Gender: {gender}
Mean of Workers: {proportion}%"))) +
geom_col(aes(fill = var), position = "fill") +
geom_vline(xintercept = 0.5, col = "white", lty = 2, lwd = 1.5) + #membuat vertical line
labs(title = "Composition of Wokers Male and Female",
x = NULL,
y = NULL) +
scale_fill_manual(values = c("black", "firebrick")) +
scale_y_discrete(labels = wrap_format(30)) + # wrap tulisan agar tidak terlalu panjang
scale_x_continuous(labels = percent_format(accuracy = 1)) +
theme_algoritma + #harus dirun chunk atas untuk custom theme yg disediakan
theme(legend.position = "none") #untuk hapus legend
ggplotly(plot_composition, tooltip = "text")
plot_dist <- workers_clean %>%
ggplot(aes(total_earnings_male,
total_earnings_female)) +
geom_jitter(aes(col = major_category,
text = glue("{str_to_upper(major_category)}
Earnings Male: {total_earnings_male}
Earnings Female: {total_earnings_female}"))) +
geom_smooth() +
labs(y = "Total Earnings Female",
x = "Total Earnings Male",
title = "Distribution of Plot Earnings") +
scale_color_brewer(palette = "Set3") +
theme_algoritma +
theme(legend.position = "none")
plot_dist_inter <- ggplotly(plot_dist, tooltip = "text")
plot_dist_inter
install.packages('rsconnect')
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
ggplot(covid_daily, aes(Date, Cum.Cases))
library(shiny)
library(shinydashboard)
library(tidyverse)
library(glue)
library(scales)
library(DT)
library(plotly)
library(lubridate)
library(dplyr)
library(anytime)
library(RColorBrewer)
library(leaflet)]
library(shiny)
library(shinydashboard)
library(tidyverse)
library(glue)
library(scales)
library(DT)
library(plotly)
library(lubridate)
library(dplyr)
library(anytime)
library(RColorBrewer)
library(leaflet)
library(ggplot2)
covid_daily %>%
ggplot(
aes(
x = Date, y = Cum.Cases
)
) +
geom_line()
ggplot(covid_daily, aes(Date, Cum.Cases))
covid_daily %>%
ggplot(
aes(
x = Date, y = Cum.Cases
)
) +
geom_line()
#ggplot(covid_daily, aes(Date, Cum.Cases))
covid_daily %>%
ggplot(
aes(
x = Date, y = Cum.Cases
)
) +
geom_freqpoly()
covid_daily %>%
ggplot(
aes(
x = Date, y = Cum.Cases
)
) +
geom_freqpoly()
covid_daily %>%
ggplot(
aes(
x = Date, y = Cum.Cases
)
) +
geom_line()
#ggplot(covid_daily, aes(Date, Cum.Cases))
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(glue)
library(scales)
library(DT)
library(plotly)
library(lubridate)
library(dplyr)
library(anytime)
library(RColorBrewer)
library(leaflet)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
data <- read.csv("covid.csv")
data
covid <- data %>%
rename(Date = ï..Date) %>%
select(-c("Growth.Factor.of.New.Deaths","Growth.Factor.of.New.Cases","Total.Rural.Villages","Total.Urban.Villages",
"Total.Cities","City.or.Regency","Total.Cases","Total.Deaths","Total.Recovered","Total.Active.Cases")) %>%
mutate(Date = ymd(anytime::anydate(Date)),
Month = month(Date, label = TRUE, abbr = FALSE),
Day = lubridate::day(Date),
Island = replace(Island, Island=="","Kalimantan")
)
covid
# colsums(is.na(covid))
# covid[covid$location=="indonesia"]
# dim(covid)
covid.island <- data %>%
rename(Date = ï..Date) %>%
select(-c("Growth.Factor.of.New.Deaths","Growth.Factor.of.New.Cases","Total.Rural.Villages","Total.Urban.Villages",
"Total.Cities","City.or.Regency","Total.Cases","Total.Deaths","Total.Recovered","Total.Active.Cases")) %>%
mutate(Date = ymd(anytime::anydate(Date)),
Month = lubridate::month(Date),
Day = lubridate::day(Date),
Island = replace(Island, Island=="","Kalimantan")
)
covid.island
covid.atDate <- covid %>%
filter(Date <= max(Date)) %>%
select("Longitude", "Latitude")
leaflet(data = covid.atDate) %>%
addTiles() %>%
addCircleMarkers(col = "maroon",
fillOpacity = 1,
radius = 5,
stroke = TRUE,
clusterOptions = markerClusterOptions(
maxClusterRadius=35, disableClusteringAtZoom=14
)
)
covid_daily <- covid %>%
group_by(Date) %>%
summarise(Total.Cases = sum(New.Cases),
Total.Death = sum(New.Deaths),
Total.Recover = sum(New.Recovered)) %>%
mutate(Cum.Cases = cumsum(Total.Cases),
Cum.Death = cumsum(Total.Death),
Cum.Recover = cumsum(Total.Recover),
active.case = Cum.Cases-Cum.Death-Cum.Recover,
Month = month(Date, label = TRUE, abbr = FALSE))
covid_daily
covid_month <- covid %>%
filter(Month=="March")
covid_month
covid_island <- covid %>%
filter(Month=="March") %>%
group_by(Island) %>%
summarise(Total.Cases = sum(New.Cases),
Total.Death = sum(New.Deaths),
Total.Recover = sum(New.Recovered))
covid_island
data.agg3 <- covid_island %>%
select(Island,Total.Cases)
data.agg3
plot_ranking <- data.agg3 %>%
ggplot(aes(x = value,
y = reorder(Island,value),
)) +
geom_col(fill = "dodgerblue4")
plot_ranking
covid_island <- covid %>%
filter(Month=="March") %>%
group_by(Island) %>%
summarise(Total.Cases = sum(New.Cases),
Total.Death = sum(New.Deaths),
Total.Recover = sum(New.Recovered))
data.agg3 <- covid_island %>%
select("Island","Total.Cases","Total.Death","Total.Recover") %>%
gather(key = "variable", value = "value", -Island)
covid_island <- covid %>%
filter(Month=="March") %>%
group_by(Island) %>%
summarise(Total.Cases = sum(New.Cases),
Total.Death = sum(New.Deaths),
Total.Recover = sum(New.Recovered))
data.agg3 <- covid_island %>%
select("Island","Total.Cases","Total.Death","Total.Recover") %>%
gather(key = "variable", value = "value", -Island)
covid_island <- covid %>%
filter(Month=="March") %>%
group_by(Island) %>%
summarise(Total.Cases = sum(New.Cases),
Total.Death = sum(New.Deaths),
Total.Recover = sum(New.Recovered))
data.agg3 <- covid_island %>%
select("Island","Total.Cases","Total.Death","Total.Recover") %>%
gather(key = "variable", value = "value", -Island)
plot3 <- data.agg3 %>%
ggplot(aes(Island, value)) +
geom_col(aes(fill = variable), position = "dodge")+
scale_fill_manual(values=c("#153E7E","red","#6698FF"))+
theme_minimal()
plot3
covid_island <- covid %>%
filter(Month=="March") %>%
group_by(Island) %>%
summarise(Total.Cases = sum(New.Cases),
Total.Death = sum(New.Deaths),
Total.Recover = sum(New.Recovered))
data.agg3 <- covid_island %>%
select("Island","Total.Cases","Total.Death","Total.Recover") %>%
gather(key = "variable", value = "value", -Island)
plot3 <- data.agg3 %>%
ggplot(aes(Island, value)) +
geom_col(aes(fill = variable), position = "dodge")+
scale_fill_manual(values=c("#153E7E","red","#6698FF"))+
theme_minimal()
plot3
plot3 <- data.agg3 %>%
ggplot(aes(x = Island, y=value)) +
geom_bar(aes(color = variable)) #+
# scale_color_manual(values = c("red","black","blue")) +
# theme_light()+
# ggtitle("Kurva Evolusi Kasus Covid")
plot3
data.agg1 <- covid_daily %>%
select("Date","active.case","Cum.Cases","Cum.Death","Cum.Recover") %>%
gather(key = "variable", value = "value", -Date)
data.agg1
# data.agg1 <- covid_daily %>%
#   select("Date","active.case","Cum.Cases","Cum.Death","Cum.Recover") %>%
#   gather(key = "variable", value = "value", -Date)
plot1 <- data.agg1 %>%
ggplot(aes(x = Date, y=value)) +
geom_line(aes(color = variable, linetype = variable)) +
scale_color_manual(values = c("red","orange","black", "blue")) +
theme_light()+
ggtitle("Kurva Evolusi Kasus Covid")
ggplotly(plot1)
#ggplot(covid_daily, aes(Date, Cum.Cases))
runApp()
